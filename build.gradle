plugins {
    id "java"
    id "java-library"
    id "maven-publish"
}

sourceCompatibility = JavaVersion.VERSION_1_8

def ENV = System.getenv()
version = "0.18.1" + (ENV.GITHUB_ACTIONS ? "" : "+local")

group = 'net.ornithemc'
archivesBaseName = project.name.toLowerCase()

repositories {
    mavenCentral()
    maven {
        name "Fabric"
        url "https://maven.fabricmc.net/"
    }
    maven {
        name "Ornithe"
        url "https://maven.ornithemc.net/releases"
    }
}

configurations {
    ship
    enigma
    implementation.extendsFrom ship
    compileOnly.extendsFrom enigma
    testImplementation.extendsFrom enigma
}

dependencies {
    ship 'org.ow2.asm:asm:9.3'
    ship 'org.ow2.asm:asm-commons:9.3'
    ship 'org.ow2.asm:asm-tree:9.3'
    ship 'org.ow2.asm:asm-util:9.3'
    ship 'net.ornithemc:tiny-mappings-parser:0.3.0'
    ship 'net.ornithemc:nester:1.3.0'
    ship 'com.google.guava:guava:31.1-jre'
    compileOnly 'org.jetbrains:annotations:23.0.0'

    enigma "cuchaz:enigma:0.23.2"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Stitch',
                'Implementation-Version': archiveVersion,
                'Main-Class': "net.fabricmc.stitch.Main"
    }
}

task allJar(type: Jar) {
    from {
        configurations.ship.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    manifest {
        attributes 'Implementation-Title': 'Stitch',
                'Implementation-Version': archiveVersion,
                'Main-Class': "net.fabricmc.stitch.Main"
    }
    archiveClassifier = 'all'
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    with jar
}

java {
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // select the repositories you want to publish to
    repositories {
        if (ENV.MAVEN_URL) {
            repositories.maven {
                name "fabric"
                url ENV.MAVEN_URL
                credentials {
                    username ENV.MAVEN_USERNAME
                    password ENV.MAVEN_PASSWORD
                }
            }
        }
    }
}

test {
    useJUnitPlatform()
}

// A task to ensure that the version being released has not already been released.
task checkVersion {
    doFirst {
        def xml = new URL("https://maven.fabricmc.net/net/fabricmc/stitch/maven-metadata.xml").text
        def metadata = new XmlSlurper().parseText(xml)
        def versions = metadata.versioning.versions.version*.text()
        if (versions.contains(version)) {
            throw new RuntimeException("${version} has already been released!")
        }
    }
}

publish.mustRunAfter checkVersion
